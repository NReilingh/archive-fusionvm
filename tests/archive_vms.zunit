#!/usr/bin/env zunit

# $TEMP is set up in bootstrap
@setup {
  [ -d $TEMP ] || mkdir $TEMP
  [ -f $TEMP/decoy_file ] || touch $TEMP/decoy_file
  [ -d $TEMP/decoy_dir ] || mkdir $TEMP/decoy_dir
}

@teardown {
  rm -r $TEMP
}

@test 'Exit with error when no arguments are supplied' {
  run archive_vms.zsh

  assert $state equals 3
}

@test 'Exit with error when no second argument is supplied' {
  run archive_vms.zsh $TEMP/decoy_dir

  assert $state equals 3
}

@test 'Exit with error when first argument path does not exist' {
  run archive_vms.zsh /zxcvbn/foo/bar/baz/bluth $TEMP/out.dmg

  assert $state equals 3
}

@test 'First argument relative path is expanded to absolute path' {
  # $RELTEMP is also set up in bootstrap
  run archive_vms.zsh $RELTEMP/decoy_dir $TEMP/out.dmg

  # Filter run output to line that begins with SRCPATH.
  srcpath=(${(M)lines:#SRCPATH*})

  assert $srcpath contains "$TEMP/decoy_dir"
}

@test 'Exit with error when first argument path is a file' {
  run archive_vms.zsh $TEMP/decoy_file $TEMP/out.dmg

  assert $state equals 3
}

@test 'Running VMs inside path are passed to suspend command' {
  vmone="$TEMP/decoy_dir/examplevm one.vmx"
  vmtwo="$TEMP/decoy_dir/examplevmtwo.vmx"
  bogusvm="$TEMP/some_other_dir/examplevm.vmx"

  # This is the mock data that will be returned by `vmrun list`
  cat > $TEMP/vmrun_list_1 <<-EOF
	$vmone
	$vmtwo
	$bogusvm
	EOF

  run archive_vms.zsh $TEMP/decoy_dir $TEMP/out.dmg

  # Suspend calls are logged to file; read as array.
  suspendout=(${(@f)"$(<$TEMP/vmrun_suspend.calls)"})

  assert $vmone in $suspendout
  assert $vmtwo in $suspendout
  assert $bogusvm not_in $suspendout
}

@test 'Suspend command is not invoked if no VMs are running' {
  cat > $TEMP/vmrun_list_1 <<-EOF
	EOF

  run archive_vms.zsh $TEMP/decoy_dir $TEMP/out.dmg

  if [ -f $TEMP/vmrun_suspend.calls ]; then
    fail 'vmrun suspend was called'
  else
    pass
  fi
}

@test 'Suspend command is attempted up to three times' {
  tee $TEMP/vmrun_list_1 \
      $TEMP/vmrun_list_2 \
      $TEMP/vmrun_list_3 \
      > /dev/null <<-EOF
  	$TEMP/decoy_dir/examplevm.vmx
	EOF

  run archive_vms.zsh $TEMP/decoy_dir $TEMP/out.dmg
  
  suspendcalls=(${(@f)"$(<$TEMP/vmrun_suspend.calls)"})

  assert ${#suspendcalls} equals 3
}

@test 'Exit with failure if VMs are not suspended by fourth attempt' {
  tee $TEMP/vmrun_list_1 \
      $TEMP/vmrun_list_2 \
      $TEMP/vmrun_list_3 \
      $TEMP/vmrun_list_4 \
      > /dev/null <<-EOF
  	$TEMP/decoy_dir/examplevm.vmx
	EOF

  run archive_vms.zsh $TEMP/decoy_dir $TEMP/out.dmg

  assert $state equals 4
  if [ -f $TEMP/hdiutil.calls ]; then
    fail 'hdiutil was called'
  else
    pass
  fi
}

@test 'hdiutil create is executed' {
  run archive_vms.zsh $TEMP/decoy_dir $TEMP/out.dmg

  assert "$TEMP/hdiutil.calls" exists
}

@test 'hdiutil create is passed both input arguments' {
  arg1=$TEMP/decoy_dir
  arg2=$TEMP/out.dmg

  run archive_vms.zsh $arg1 $arg2

  # hdiutil mock outputs calls to file; read args as array
  hdiutilout=(${(@f)"$(<$TEMP/hdiutil.calls)"})

  assert $arg1 in $hdiutilout
  assert $arg2 in $hdiutilout
}

