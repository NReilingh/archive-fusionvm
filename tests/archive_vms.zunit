#!/usr/bin/env zunit

@setup {
  [ -f tests/_support/decoy_file ] || touch tests/_support/decoy_file
  [ -d tests/_support/decoy_dir ] || mkdir tests/_support/decoy_dir
  [ ! -f tests/_support/hdiutil.calls ] || rm tests/_support/hdiutil.calls
  [ ! -f tests/_support/vmrun_suspend.calls ] || rm tests/_support/vmrun_suspend.calls
}

@teardown {
  rm tests/_support/decoy_file
  rm -r tests/_support/decoy_dir
  [ ! -f tests/_support/hdiutil.calls ] || rm tests/_support/hdiutil.calls
  [ ! -f tests/_support/vmrun_suspend.calls ] || rm tests/_support/vmrun_suspend.calls
}

@test 'Exit with error when no arguments are supplied' {
  run archive_vms.zsh

  assert $state equals 3
}

@test 'Exit with error when no second argument is supplied' {
  run archive_vms.zsh tests/_support/decoy_dir

  assert $state equals 3
}

@test 'Exit with error when first argument path does not exist' {
  run archive_vms.zsh /zxcvbn/foo/bar/baz/bluth tests/_support/out.dmg

  assert $state equals 3
}

@test 'First argument relative path is expanded to absolute path' {
  run archive_vms.zsh tests/_support/decoy_dir tests/_support/out.dmg

  # Filter run output to line that begins with SRCPATH.
  srcpath=(${(M)lines:#SRCPATH*})

  assert $srcpath contains "$PWD/tests/_support/decoy_dir"
}

@test 'Exit with error when first argument path is a file' {
  run archive_vms.zsh tests/_support/decoy_file tests/_support/out.dmg

  assert $state equals 3
}

@test 'Running VMs inside path are passed to suspend command' {
  vmone="$PWD/tests/support/decoy_dir/examplevmone.vmx"
  vmtwo="$PWD/tests/support/decoy_dir/examplevmtwo.vmx"
  # Mock vmrun list to output multiple paths
  # Output three paths:
  # $PWD/tests/support/decoy_dir/examplevmone.vmx
  # $PWD/tests/support/decoy_dir/examplevmtwo.vmx
  # $PWD/tests/support/some_other_dir/examplevm.vmx
  #
  # Above will be a here-string that goes to a file to be output by mock
  #
  # touch tests/_support/

  run archive_vms.zsh tests/support/decoy_dir tests/_support/out.dmg

  # Expect vmrun suspend to receive examplevmone.vmx and examplevmtwo.vmx
  # Mock vmrun suspend to record calls and arguments

  suspendout=(${(@f)"$(<tests/_support/vmrun_suspend.calls)"})
  assert $vmone in $suspendout
  assert $vmtwo in $suspendout
}

@test 'Suspend command is not invoked if no VMs are running' {
  skip 'Not implemented'
}

@test 'Suspend command is attempted up to three times' {
  skip 'Not implemented'
}

@test 'Exit with failure if VMs are not suspended by fourth attempt' {
  skip 'Not implemented'
}

@test 'hdiutil create is executed' {
  run archive_vms.zsh tests/_support/decoy_dir tests/_support/out.dmg

  assert "$PWD/tests/_support/hdiutil.calls" exists
}

@test 'hdiutil create is passed both input arguments' {
  arg1=tests/_support/decoy_dir
  arg2=tests/_support/out.dmg

  run archive_vms.zsh $arg1 $arg2

  hdiutilout=(${(@f)"$(<tests/_support/hdiutil.calls)"})

  assert $arg1 in $hdiutilout
  assert $arg2 in $hdiutilout
}

